@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthService Auth
@inject ExpenseService ExpenseService
@inject NavigationManager NavigationManager
@inject DollarValues DollarValues
@page "/"
@using System.Globalization

<AuthorizeView>
    <Authorized>
        <div class="max-w-4xl mx-auto">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-2xl font-semibold">Dashboard</h2>
                    <p class="text-sm text-gray-500">Overview of your expenses</p>
                </div>
                <div>
                    <button class="bg-indigo-600 text-white px-4 py-2 rounded" @onclick="New">New Expense</button>
                    <button class="ml-2 bg-red-600 text-white px-3 py-2 rounded" @onclick="Logout">Logout</button>
                </div>
            </div>
            <div class="grid grid-cols-3 gap-4 mb-6">
                <div class="col-span-1 bg-white p-4 rounded shadow">
                    <div class="text-sm text-gray-500">Total ARS$</div>
                    <div class="text-xl text-blue-900 font-bold">@total.ToString("C")</div>
                </div>
                <div class="col-span-1 bg-white p-4 rounded shadow">
                    <div class="text-sm text-gray-500">Total USD$</div>
                    <div class="text-xl text-green-900 font-bold">@ToUsdDisplay(total)</div>
                </div>
                <div class="col-span-1 bg-white p-4 rounded shadow">
                    <div class="text-sm text-gray-500">This month</div>
                    <div class="text-xl font-bold">@monthTotal.ToString("C")</div>
                </div>
            </div>
            <div class="mb-4 flex flex-wrap gap-4">
                <div class="flex-1 min-w-[200px]">
                    <input type="text" placeholder="Search expenses..." class="w-full px-3 py-2 border rounded" value="@searchText" @oninput="@(e => { searchText = e.Value?.ToString() ?? string.Empty; FilterExpenses(); })" />
                </div>
                <div>
                    <select class="px-3 py-2 border rounded w-[140px]" value="@selectedEntityType" @onchange="@(e => { selectedEntityType = e.Value?.ToString() ?? string.Empty; FilterExpenses(); })">
                        <option value="">All Entities</option>
                        <option value="Bank">Banks</option>
                        <option value="DigitalWallet">Digital Wallets</option>
                    </select>
                </div>
                <div>
                    <select class="px-3 py-2 border rounded w-[120px]" value="@(selectedMonth?.ToString() ?? string.Empty)" @onchange="@(e => { selectedMonth = string.IsNullOrEmpty(e.Value?.ToString()) ? null : int.Parse(e.Value.ToString()!); FilterExpenses(); })">
                        <option value="">All Months</option>
                        @for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@(new DateTime(2000, i, 1).ToString("MMMM"))</option>
                        }
                    </select>
                </div>
                <div>
                    <select class="px-3 py-2 border rounded w-[100px]" value="@(selectedYear?.ToString() ?? string.Empty)" @onchange="@(e => { selectedYear = string.IsNullOrEmpty(e.Value?.ToString()) ? null : int.Parse(e.Value.ToString()!); FilterExpenses(); })">
                        <option value="">All Years</option>
                        @foreach (var year in availableYears)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                <div>
                    <button class="px-3 py-2 border rounded bg-gray-100 hover:bg-gray-200" @onclick="ClearFilters">Clear Filters</button>
                </div>
            </div>
            <div class="bg-white rounded shadow">
                @if (filteredExpenses == null || !filteredExpenses.Any())
                {
                    <div class="p-8 text-center">
                        <img src="img/error.gif" alt="No records found" class="mx-auto mb-4 w-64" />
                        <p class="text-gray-500">No expenses found</p>
                        @if (!string.IsNullOrEmpty(searchText) || !string.IsNullOrEmpty(selectedEntityType) || selectedMonth.HasValue || selectedYear.HasValue)
                        {
                            <p class="text-sm text-gray-400 mt-2">Try adjusting your filters</p>
                            <button class="mt-4 px-4 py-2 text-sm text-indigo-600 border border-indigo-600 rounded hover:bg-indigo-50" @onclick="ClearFilters">Clear All Filters</button>
                        }
                    </div>
                }
                else
                {
                    <table class="min-w-full table-fixed">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="p-3 text-left w-2/5">Title</th>
                                <th class="p-3 text-left">ARS$</th>
                                <th class="p-3 text-left">USD$</th>
                                <th class="p-3 text-left">Date</th>
                                <th class="p-3 text-left w-1/5">Entity</th>
                                <th class="p-3 text-left">Payment Method</th>
                                <th class="p-3"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var e in filteredExpenses)
                            {
                                <tr class="border-t">
                                    <td class="p-3 truncate whitespace-nowrap overflow-hidden">@e.Title</td>
                                    <td class="p-3 truncate text-blue-900">@e.Amount.ToString("C")</td>
                                    <td class="p-3 truncate text-green-900">@ToUsdDisplay(e.Amount)</td>
                                    <td class="p-3 truncate">@e.Date.ToShortDateString()</td>
                                    <td class="p-3 truncate whitespace-nowrap overflow-hidden">
                                        @if (e.FinancialEntity != null)
                                        {
                                            <span>@e.FinancialEntity.Name (@e.FinancialEntity.Type)</span>
                                        }
                                    </td>
                                    <td class="p-3 truncate">
                                        @if (e.IsPaid)
                                        {
                                            <span class="text-center bg-green-100 text-green-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded-sm dark:bg-green-900 dark:text-green-300">Paid</span>
                                        }
                                        else if (e.IsTransferred)
                                        {
                                            <span class="text-center bg-blue-100 text-blue-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded-sm dark:bg-blue-900 dark:text-blue-300">Transferred</span>
                                        }
                                        else
                                        {
                                            <span class="text-center bg-yellow-100 text-yellow-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded-sm dark:bg-yellow-900 dark:text-yellow-300">Pending</span>
                                        }
                                    </td>
                                    <td class="p-3 truncate">
                                        <button class="text-indigo-600 mr-2" @onclick="() => Edit(e.Id)">‚úèÔ∏è</button>
                                        <button class="text-red-600" @onclick="() => Delete(e.Id)">üóëÔ∏è</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            @if (showModal)
            {
                <ExpenseModal Expense="editing" OnClose="CloseModal" OnSaved="Reload" />
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="max-w-md mx-auto mt-20">
            <img src="img/home.gif" alt="login" class="mx-auto" />
            <div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4" role="alert">
                <p class="font-bold">Warning</p>
                <p>You must <a href="/login" class="text-indigo-600">login</a> to view your dashboard.</p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<ExpensesTracker.Data.Expense>? expenses;
    List<ExpensesTracker.Data.Expense>? filteredExpenses;
    decimal total = 0;
    decimal monthTotal = 0;
    bool showModal = false;
    ExpensesTracker.Data.Expense? editing;
    int currentUserId;
    string searchText = string.Empty;
    string selectedEntityType = string.Empty;
    int? selectedMonth = null;
    int? selectedYear = null;
    List<int> availableYears = new();
    decimal DollarPrice { get; set; }

    // Return a safe (non-zero) dollar price to avoid division by zero
    decimal SafeDollarPrice => DollarPrice <= 0 ? 1m : DollarPrice;

    // Formats an ARS amount as USD using the current DollarPrice safely.
    string ToUsdDisplay(decimal arsAmount)
    {
        try
        {
            var usd = arsAmount / SafeDollarPrice;
            // Use invariant culture and USD currency symbol for consistency
            return usd.ToString("C", CultureInfo.CreateSpecificCulture("en-US"));
        }
        catch
        {
            // Fallback in the unlikely event of an error
            return "$0.00";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await DollarValues.GetLastDollarValues();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = int.Parse(user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)!.Value);
            DollarPrice = (DollarValues.PriceBuy + DollarValues.PriceSell) / 2;
            await Load();
        }
    }

    private void FilterExpenses()
    {
        filteredExpenses = expenses;

    if (!string.IsNullOrWhiteSpace(searchText))
    {
        filteredExpenses = filteredExpenses?
        .Where(e => e.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
               (e.FinancialEntity?.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
        .ToList();
    }

        if (!string.IsNullOrWhiteSpace(selectedEntityType))
        {
            var type = Enum.Parse<EntityType>(selectedEntityType);
            filteredExpenses = filteredExpenses?
                .Where(e => e.FinancialEntity?.Type == type)
                .ToList();
        }

        if (selectedMonth.HasValue)
        {
            filteredExpenses = filteredExpenses?
                .Where(e => e.Date.Month == selectedMonth.Value)
                .ToList();
        }

        if (selectedYear.HasValue)
        {
            filteredExpenses = filteredExpenses?
                .Where(e => e.Date.Year == selectedYear.Value)
                .ToList();
        }

        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchText = string.Empty;
        selectedEntityType = string.Empty;
        selectedMonth = null;
        selectedYear = null;
        FilterExpenses();
    }

    async Task Load()
    {
        expenses = await ExpenseService.GetByUserAsync(currentUserId);
        // Update available years list
        availableYears = expenses?
            .Select(e => e.Date.Year)
            .Distinct()
            .OrderByDescending(y => y)
            .ToList() ?? new List<int>();
        FilterExpenses();
        total = expenses?.Sum(e => e.Amount) ?? 0;
        var now = DateTime.Now;
        monthTotal = expenses?.Where(e => e.Date.Year == now.Year && e.Date.Month == now.Month).Sum(e => e.Amount) ?? 0;
        StateHasChanged();
    }

    void New()
    {
        editing = new ExpensesTracker.Data.Expense { Date = DateTime.Now, UserId = currentUserId };
        showModal = true;
    }

    async Task Edit(int id)
    {
        editing = await ExpenseService.GetAsync(id);
        showModal = true;
    }

    async Task Delete(int id)
    {
        await ExpenseService.DeleteAsync(id);
        await Load();
    }

    async Task CloseModal()
    {
        showModal = false;
        editing = null;
        await Load();
    }

    async Task Reload()
    {
        showModal = false;
        await Load();
    }

    async Task Logout()
    {
        await Auth.LogoutAsync();
        if (AuthStateProvider is ExpensesTracker.Services.SimpleAuthStateProvider sap) sap.NotifyAuthChanged();
        NavigationManager.NavigateTo("/login");
    }
}